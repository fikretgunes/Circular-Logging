#include <iostream>
#include <fstream>
#include <iomanip>
#include <ctime>
#include <chrono>
#include <thread>
#include <json/json.h>

// Loglama sınıfı
class GuzelLoglayici {
public:
    GuzelLoglayici(const std::string& ayarDosyasi) {
        AyarlariOku(ayarDosyasi);
        LogDosyasiOlustur();
    }

    ~GuzelLoglayici() {
        if (logDosyasi.is_open()) {
            logDosyasi.close();
        }
    }

    void GuzelLogEkle(const std::string& mesaj) {
        LogDosyasiRotasyonunuKontrolEt();
        logDosyasi << SuankiZamaniGetir() << " " << mesaj << std::endl;
    }

private:
    int maksLogDosyaSayisi;
    int logRotasyonSuresiGun;
    std::string logDosyaYolu;
    std::ofstream logDosyasi;

    void AyarlariOku(const std::string& ayarDosyasi) {
        std::ifstream configDosyasi(ayarDosyasi);
        Json::Value ayarlar;
        configDosyasi >> ayarlar;

        maksLogDosyaSayisi = ayarlar["maksLogDosyaSayisi"].asInt();
        logRotasyonSuresiGun = ayarlar["logRotasyonSuresiGun"].asInt();
        logDosyaYolu = ayarlar["logDosyaYolu"].asString();
        
        configDosyasi.close();
    }

    void LogDosyaOlustur() {
        logDosyasi.open(LogDosyaAdiniOlustur(), std::ios::app);
    }

    std::string LogDosyaAdiniOlustur() {
        auto simdikiZaman = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
        std::stringstream ss;
        ss << std::put_time(std::gmtime(&simdikiZaman), "%Y-%m-%d_%H-%M-%S") << ".log";
        return logDosyaYolu + "/" + ss.str();
    }

    std::string SuankiZamaniGetir() {
        auto simdikiZaman = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
        std::stringstream ss;
        ss << std::put_time(std::gmtime(&simdikiZaman), "%Y-%m-%d %H:%M:%S");
        return ss.str();
    }

    void LogDosyasiRotasyonunuKontrolEt() {
        auto simdikiZaman = std::chrono::system_clock::now();
        auto sonRotasyonZamani = std::chrono::system_clock::from_time_t(std::chrono::system_clock::to_time_t(simdikiZaman) - logRotasyonSuresiGun * 24 * 60 * 60);
        
        if (simdikiZaman >= sonRotasyonZamani) {
            logDosyasi.close();
            LogDosyaRotasyonunuYap();
            LogDosyaOlustur();
        }
    }

    void LogDosyaRotasyonunuYap() {
        std::vector<std::string> logDosyaListesi;
        for (int i = 1; i <= maksLogDosyaSayisi; ++i) {
            std::string dosyaAdi = logDosyaYolu + "/" + GunIcinLogDosyaAdiniGetir(i);
            logDosyaListesi.push_back(dosyaAdi);
        }

        std::remove(logDosyaListesi.back().c_str());
        for (int i = maksLogDosyaSayisi - 1; i >= 1; --i) {
            std::rename(logDosyaListesi[i - 1].c_str(), logDosyaListesi[i].c_str());
        }
    }

    std::string GunIcinLogDosyaAdiniGetir(int gunOffset) {
        auto simdikiZaman = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
        auto gunZamani = std::chrono::system_clock::to_time_t(simdikiZaman - gunOffset * 24 * 60 * 60);
        std::stringstream ss;
        ss << std::put_time(std::gmtime(&gunZamani), "%Y-%m-%d") << ".log";
        return ss.str();
    }
};

int main() {
    GuzelLoglayici guzelLoglayici("guzel_loglama_ayarlar.json");

    for (int i = 0; i < 10; ++i) {
        std::this_thread::sleep_for(std::chrono::seconds(1));
        guzelLoglayici.GuzelLogEkle("Guzel log mesaji #" + std::to_string(i));
    }

    return 0;
}
